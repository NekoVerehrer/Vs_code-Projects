// Algorithmus zur Suche in einem Bin채rbaum.
//
// Ein Knoten wird durch drei aufeinander folgende Register dargestellt.
//  Ri   = im Knoten gespeicherte Zahl
//  Ri+1 = Index des linken Kindknotens
//  Ri+2 = Index des rechten Kindkontens
//
// Registerbelegung
// Eingabe: 
//   R1 = gesuchte Zahl G
//   R2 = Index der Wurzel 
// Verarbeitung:
//   R2 = Index des aktuellen Knotens mit der Zahl Z
// Ausgabe: 
//   R0 = 1, falls gesuchte Zahl gefunden wurde, sonst 0
//   R2 = Index der gefundenen Zahl
//
// Die folgenden Programmzeilen erstellen diesen Bin채rbaum:
//            50
//          /    \
//         /      \
//        25      75
//       /  \     / \
//      /    \   /   \
//     1    40  60   100
//

// Bin채rbaum Erzeugung - Anfang
        // setze Index der Wurzel
        LOAD    #3  
        STORE   2
        // erzeuge die einzelnen Knoten
        // Knoten mit Zahl 50
        LOAD    #50
        STORE   3
        LOAD    #6
        STORE   4
        LOAD    #9
        STORE   5
        // Knoten mit Zahl 25
        LOAD    #25
        STORE   6
        LOAD    #12
        STORE   7
        LOAD    #15
        STORE   8
        // Knoten mit Zahl 75
        LOAD    #75
        STORE   9
        LOAD    #18
        STORE   10
        LOAD    #21
        STORE   11
        // Knoten mit Zahl 1
        LOAD    #1
        STORE   12
        LOAD    #0
        STORE   13
        STORE   14
        // Knoten mit Zahl 40
        LOAD    #40
        STORE   15
        LOAD    #0
        STORE   16
        STORE   17
        // Knoten mit Zahl 60
        LOAD    #60
        STORE   18
        LOAD    #0
        STORE   19
        STORE   20
        // Knoten mit Zahl 100
        LOAD    #100
        STORE   21
        LOAD    #0
        STORE   22
        STORE   23
// Bin채rbaum Erzeugung - Ende


// Eigentlicher Suchalgorithmus

           // Vergleich der gesuchten Zahl G mit der aktuellen Zahl Z
Vergleich: LOAD   *2
           SUB     1
           JNZERO Links   //  G < Z
           LOAD    1
           SUB    *2
           JNZERO Rechts  //  G > Z 
           LOAD   #1      //  G = Z
           END

           // gehe zum linken Kindknoten
Links:     LOAD    2
           ADD    #1
           STORE   2
           LOAD   *2
           STORE   2
           JNZERO Vergleich
           END

           // gehe zum rechten Kindknoten
Rechts:    LOAD    2
           ADD    #2
           STORE   2
           LOAD   *2
           STORE   2
           JNZERO Vergleich
           END

